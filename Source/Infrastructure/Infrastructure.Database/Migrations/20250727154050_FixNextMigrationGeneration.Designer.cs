// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250727154050_FixNextMigrationGeneration")]
    partial class FixNextMigrationGeneration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Common.Identity.EF.Entities.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("HashedToken")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("HashedToken")
                        .IsUnique();

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Modules.QuizResults.Models.QuizResult", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("Id");

                    b.Property<TimeSpan>("MaxDuration")
                        .HasColumnType("time");

                    b.Property<bool>("NegativePoints")
                        .HasColumnType("bit");

                    b.Property<string>("QuizId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("RandomAnswers")
                        .HasColumnType("bit");

                    b.Property<bool>("RandomQuestions")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizResults");
                });

            modelBuilder.Entity("Domain.Modules.QuizResults.Models.QuizResultMultipleChoiceQuestion", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("Id");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("int");

                    b.Property<float>("PointsPossibleToGet")
                        .HasColumnType("real");

                    b.Property<float>("ScoredPoints")
                        .HasColumnType("real");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id", "No");

                    b.ToTable("QuizResultMultipleChoiceQuestions");
                });

            modelBuilder.Entity("Domain.Modules.QuizResults.Models.QuizResultMultipleChoiceQuestionAnswer", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("Id");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<int>("SubNo")
                        .HasColumnType("int");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id", "No", "SubNo");

                    b.ToTable("QuizResultMultipleChoiceQuestionAnswers");
                });

            modelBuilder.Entity("Domain.Modules.QuizResults.Models.QuizResultOpenQuestion", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("Id");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("GivenAnswer")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("int");

                    b.Property<float>("PointsPossibleToGet")
                        .HasColumnType("real");

                    b.Property<float>("ScoredPoints")
                        .HasColumnType("real");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id", "No");

                    b.ToTable("QuizResultOpenQuestions");
                });

            modelBuilder.Entity("Domain.Modules.QuizResults.Models.QuizResultSingleChoiceQuestion", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("Id");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("int");

                    b.Property<float>("PointsPossibleToGet")
                        .HasColumnType("real");

                    b.Property<float>("ScoredPoints")
                        .HasColumnType("real");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id", "No");

                    b.ToTable("QuizResultSingleChoiceQuestions");
                });

            modelBuilder.Entity("Domain.Modules.QuizResults.Models.QuizResultSingleChoiceQuestionAnswer", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("Id");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<int>("SubNo")
                        .HasColumnType("int");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id", "No", "SubNo");

                    b.ToTable("QuizResultSingleChoiceQuestionAnswers");
                });

            modelBuilder.Entity("Domain.Modules.Quizzes.Models.Quiz", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("Id");

                    b.Property<Guid>("Code")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("Domain.Modules.Quizzes.Models.QuizMultipleChoiceQuestion", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("Id");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id", "No");

                    b.ToTable("QuizMultipleChoiceQuestions");
                });

            modelBuilder.Entity("Domain.Modules.Quizzes.Models.QuizMultipleChoiceQuestionAnswer", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("Id");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<int>("SubNo")
                        .HasColumnType("int");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id", "No", "SubNo");

                    b.ToTable("QuizMultipleChoiceQuestionAnswers");
                });

            modelBuilder.Entity("Domain.Modules.Quizzes.Models.QuizOpenQuestion", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("Id");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id", "No");

                    b.ToTable("QuizOpenQuestions");
                });

            modelBuilder.Entity("Domain.Modules.Quizzes.Models.QuizSingleChoiceQuestion", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("Id");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id", "No");

                    b.ToTable("QuizSingleChoiceQuestions");
                });

            modelBuilder.Entity("Domain.Modules.Quizzes.Models.QuizSingleChoiceQuestionAnswer", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("Id");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<int>("SubNo")
                        .HasColumnType("int");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id", "No", "SubNo");

                    b.ToTable("QuizSingleChoiceQuestionAnswers");
                });

            modelBuilder.Entity("Domain.Modules.SharedQuizzes.Models.SharedQuiz", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("Id");

                    b.Property<string>("QuizId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizId")
                        .IsUnique();

                    b.ToTable("SharedQuizzes");
                });

            modelBuilder.Entity("Domain.Modules.SharedQuizzes.Models.SharedQuizUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("Id");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("SharedQuizUsers");
                });

            modelBuilder.Entity("Domain.Modules.Users.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("Id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Modules.QuizResults.Models.QuizResult", b =>
                {
                    b.HasOne("Domain.Modules.Quizzes.Models.Quiz", null)
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Modules.Users.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Common.Domain.ValueObjects.AggregateStateChangeInfo", "CreationInto", b1 =>
                        {
                            b1.Property<string>("OwnerId")
                                .HasColumnType("nvarchar(36)");

                            b1.Property<DateTime>("At")
                                .HasColumnType("datetime2")
                                .HasColumnName("CreatedAt");

                            b1.Property<string>("UserId")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)")
                                .HasColumnName("CreatedByUserId");

                            b1.HasKey("OwnerId");

                            b1.ToTable("QuizResults");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsOne("Common.Domain.ValueObjects.AggregateStateChangeInfo", "RemovalInfo", b1 =>
                        {
                            b1.Property<string>("OwnerId")
                                .HasColumnType("nvarchar(36)");

                            b1.Property<DateTime>("At")
                                .HasColumnType("datetime2")
                                .HasColumnName("RemovedAt");

                            b1.Property<string>("UserId")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)")
                                .HasColumnName("RemovedByUserId");

                            b1.HasKey("OwnerId");

                            b1.ToTable("QuizResults");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsOne("Common.Domain.ValueObjects.AggregateStateChangeInfo", "UpdateInfo", b1 =>
                        {
                            b1.Property<string>("OwnerId")
                                .HasColumnType("nvarchar(36)");

                            b1.Property<DateTime>("At")
                                .HasColumnType("datetime2")
                                .HasColumnName("UpdateAt");

                            b1.Property<string>("UserId")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)")
                                .HasColumnName("UpdateByUserId");

                            b1.HasKey("OwnerId");

                            b1.ToTable("QuizResults");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsOne("Common.Shared.DataStructures.Period<System.DateTime>", "QuizRunningPeriod", b1 =>
                        {
                            b1.Property<string>("QuizResultId")
                                .HasColumnType("nvarchar(36)");

                            b1.Property<DateTime>("End")
                                .HasColumnType("datetime2")
                                .HasColumnName("QuizRunningPeriodEnd");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime2")
                                .HasColumnName("QuizRunningPeriodStart");

                            b1.HasKey("QuizResultId");

                            b1.ToTable("QuizResults");

                            b1.WithOwner()
                                .HasForeignKey("QuizResultId");
                        });

                    b.Navigation("CreationInto")
                        .IsRequired();

                    b.Navigation("QuizRunningPeriod")
                        .IsRequired();

                    b.Navigation("RemovalInfo");

                    b.Navigation("UpdateInfo");
                });

            modelBuilder.Entity("Domain.Modules.QuizResults.Models.QuizResultMultipleChoiceQuestion", b =>
                {
                    b.HasOne("Domain.Modules.QuizResults.Models.QuizResult", null)
                        .WithMany("MultipleChoiceQuestions")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Modules.QuizResults.Models.QuizResultMultipleChoiceQuestionAnswer", b =>
                {
                    b.HasOne("Domain.Modules.QuizResults.Models.QuizResultMultipleChoiceQuestion", null)
                        .WithMany("Answers")
                        .HasForeignKey("Id", "No")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Modules.QuizResults.Models.QuizResultOpenQuestion", b =>
                {
                    b.HasOne("Domain.Modules.QuizResults.Models.QuizResult", null)
                        .WithMany("OpenQuestions")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Modules.QuizResults.Models.QuizResultSingleChoiceQuestion", b =>
                {
                    b.HasOne("Domain.Modules.QuizResults.Models.QuizResult", null)
                        .WithMany("SingleChoiceQuestions")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Modules.QuizResults.Models.QuizResultSingleChoiceQuestionAnswer", b =>
                {
                    b.HasOne("Domain.Modules.QuizResults.Models.QuizResultSingleChoiceQuestion", null)
                        .WithMany("Answers")
                        .HasForeignKey("Id", "No")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Modules.Quizzes.Models.Quiz", b =>
                {
                    b.HasOne("Domain.Modules.Users.Models.User", null)
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Common.Domain.ValueObjects.AggregateStateChangeInfo", "CreationInto", b1 =>
                        {
                            b1.Property<string>("OwnerId")
                                .HasColumnType("nvarchar(36)");

                            b1.Property<DateTime>("At")
                                .HasColumnType("datetime2")
                                .HasColumnName("CreatedAt");

                            b1.Property<string>("UserId")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)")
                                .HasColumnName("CreatedByUserId");

                            b1.HasKey("OwnerId");

                            b1.ToTable("Quizzes");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsOne("Common.Domain.ValueObjects.AggregateStateChangeInfo", "RemovalInfo", b1 =>
                        {
                            b1.Property<string>("OwnerId")
                                .HasColumnType("nvarchar(36)");

                            b1.Property<DateTime>("At")
                                .HasColumnType("datetime2")
                                .HasColumnName("RemovedAt");

                            b1.Property<string>("UserId")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)")
                                .HasColumnName("RemovedByUserId");

                            b1.HasKey("OwnerId");

                            b1.ToTable("Quizzes");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsOne("Common.Domain.ValueObjects.AggregateStateChangeInfo", "UpdateInfo", b1 =>
                        {
                            b1.Property<string>("OwnerId")
                                .HasColumnType("nvarchar(36)");

                            b1.Property<DateTime>("At")
                                .HasColumnType("datetime2")
                                .HasColumnName("UpdateAt");

                            b1.Property<string>("UserId")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)")
                                .HasColumnName("UpdateByUserId");

                            b1.HasKey("OwnerId");

                            b1.ToTable("Quizzes");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsOne("Domain.Modules.Quizzes.ValueObjects.QuizSettings", "Settings", b1 =>
                        {
                            b1.Property<string>("QuizId")
                                .HasColumnType("nvarchar(36)");

                            b1.Property<int>("CopyMode")
                                .HasColumnType("int")
                                .HasColumnName("CopyMode");

                            b1.Property<TimeSpan>("Duration")
                                .HasColumnType("time")
                                .HasColumnName("Duration");

                            b1.Property<bool>("NegativePoints")
                                .HasColumnType("bit")
                                .HasColumnName("NegativePoints");

                            b1.Property<int>("QuestionsCountInRunningQuiz")
                                .HasColumnType("int")
                                .HasColumnName("QuestionsCountInRunningQuiz");

                            b1.Property<bool>("RandomAnswers")
                                .HasColumnType("bit")
                                .HasColumnName("RandomAnswers");

                            b1.Property<bool>("RandomQuestions")
                                .HasColumnType("bit")
                                .HasColumnName("RandomQuestions");

                            b1.HasKey("QuizId");

                            b1.ToTable("Quizzes");

                            b1.WithOwner()
                                .HasForeignKey("QuizId");
                        });

                    b.Navigation("CreationInto")
                        .IsRequired();

                    b.Navigation("RemovalInfo");

                    b.Navigation("Settings")
                        .IsRequired();

                    b.Navigation("UpdateInfo");
                });

            modelBuilder.Entity("Domain.Modules.Quizzes.Models.QuizMultipleChoiceQuestion", b =>
                {
                    b.HasOne("Domain.Modules.Quizzes.Models.Quiz", null)
                        .WithMany("MultipleChoiceQuestions")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Modules.Quizzes.Models.QuizMultipleChoiceQuestionAnswer", b =>
                {
                    b.HasOne("Domain.Modules.Quizzes.Models.QuizMultipleChoiceQuestion", null)
                        .WithMany("Answers")
                        .HasForeignKey("Id", "No")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Modules.Quizzes.Models.QuizOpenQuestion", b =>
                {
                    b.HasOne("Domain.Modules.Quizzes.Models.Quiz", null)
                        .WithMany("OpenQuestions")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Modules.Quizzes.Models.QuizSingleChoiceQuestion", b =>
                {
                    b.HasOne("Domain.Modules.Quizzes.Models.Quiz", null)
                        .WithMany("SingleChoiceQuestions")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Modules.Quizzes.Models.QuizSingleChoiceQuestionAnswer", b =>
                {
                    b.HasOne("Domain.Modules.Quizzes.Models.QuizSingleChoiceQuestion", null)
                        .WithMany("Answers")
                        .HasForeignKey("Id", "No")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Modules.SharedQuizzes.Models.SharedQuiz", b =>
                {
                    b.HasOne("Domain.Modules.Quizzes.Models.Quiz", null)
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Common.Domain.ValueObjects.AggregateStateChangeInfo", "CreationInto", b1 =>
                        {
                            b1.Property<string>("OwnerId")
                                .HasColumnType("nvarchar(36)");

                            b1.Property<DateTime>("At")
                                .HasColumnType("datetime2")
                                .HasColumnName("CreatedAt");

                            b1.Property<string>("UserId")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)")
                                .HasColumnName("CreatedByUserId");

                            b1.HasKey("OwnerId");

                            b1.ToTable("SharedQuizzes");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsOne("Common.Domain.ValueObjects.AggregateStateChangeInfo", "RemovalInfo", b1 =>
                        {
                            b1.Property<string>("OwnerId")
                                .HasColumnType("nvarchar(36)");

                            b1.Property<DateTime>("At")
                                .HasColumnType("datetime2")
                                .HasColumnName("RemovedAt");

                            b1.Property<string>("UserId")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)")
                                .HasColumnName("RemovedByUserId");

                            b1.HasKey("OwnerId");

                            b1.ToTable("SharedQuizzes");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsOne("Common.Domain.ValueObjects.AggregateStateChangeInfo", "UpdateInfo", b1 =>
                        {
                            b1.Property<string>("OwnerId")
                                .HasColumnType("nvarchar(36)");

                            b1.Property<DateTime>("At")
                                .HasColumnType("datetime2")
                                .HasColumnName("UpdateAt");

                            b1.Property<string>("UserId")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)")
                                .HasColumnName("UpdateByUserId");

                            b1.HasKey("OwnerId");

                            b1.ToTable("SharedQuizzes");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("CreationInto")
                        .IsRequired();

                    b.Navigation("RemovalInfo");

                    b.Navigation("UpdateInfo");
                });

            modelBuilder.Entity("Domain.Modules.SharedQuizzes.Models.SharedQuizUser", b =>
                {
                    b.HasOne("Domain.Modules.SharedQuizzes.Models.SharedQuiz", null)
                        .WithMany("Users")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Modules.Users.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Modules.Users.Models.User", b =>
                {
                    b.OwnsOne("Common.Domain.ValueObjects.AggregateStateChangeInfo", "CreationInto", b1 =>
                        {
                            b1.Property<string>("OwnerId")
                                .HasColumnType("nvarchar(36)");

                            b1.Property<DateTime>("At")
                                .HasColumnType("datetime2")
                                .HasColumnName("CreatedAt");

                            b1.Property<string>("UserId")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)")
                                .HasColumnName("CreatedByUserId");

                            b1.HasKey("OwnerId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsOne("Common.Domain.ValueObjects.AggregateStateChangeInfo", "RemovalInfo", b1 =>
                        {
                            b1.Property<string>("OwnerId")
                                .HasColumnType("nvarchar(36)");

                            b1.Property<DateTime>("At")
                                .HasColumnType("datetime2")
                                .HasColumnName("RemovedAt");

                            b1.Property<string>("UserId")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)")
                                .HasColumnName("RemovedByUserId");

                            b1.HasKey("OwnerId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsOne("Common.Domain.ValueObjects.AggregateStateChangeInfo", "UpdateInfo", b1 =>
                        {
                            b1.Property<string>("OwnerId")
                                .HasColumnType("nvarchar(36)");

                            b1.Property<DateTime>("At")
                                .HasColumnType("datetime2")
                                .HasColumnName("UpdateAt");

                            b1.Property<string>("UserId")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)")
                                .HasColumnName("UpdateByUserId");

                            b1.HasKey("OwnerId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("CreationInto");

                    b.Navigation("RemovalInfo");

                    b.Navigation("UpdateInfo");
                });

            modelBuilder.Entity("Domain.Modules.QuizResults.Models.QuizResult", b =>
                {
                    b.Navigation("MultipleChoiceQuestions");

                    b.Navigation("OpenQuestions");

                    b.Navigation("SingleChoiceQuestions");
                });

            modelBuilder.Entity("Domain.Modules.QuizResults.Models.QuizResultMultipleChoiceQuestion", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Domain.Modules.QuizResults.Models.QuizResultSingleChoiceQuestion", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Domain.Modules.Quizzes.Models.Quiz", b =>
                {
                    b.Navigation("MultipleChoiceQuestions");

                    b.Navigation("OpenQuestions");

                    b.Navigation("SingleChoiceQuestions");
                });

            modelBuilder.Entity("Domain.Modules.Quizzes.Models.QuizMultipleChoiceQuestion", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Domain.Modules.Quizzes.Models.QuizSingleChoiceQuestion", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Domain.Modules.SharedQuizzes.Models.SharedQuiz", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
